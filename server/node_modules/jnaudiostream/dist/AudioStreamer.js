"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioStreamer = void 0;
const MediaBuffer_1 = __importDefault(require("./MediaBuffer"));
class AudioStreamer {
    constructor(chunksDuration) {
        this.chunksDuration = chunksDuration !== null && chunksDuration !== void 0 ? chunksDuration : 1000;
        this.chunksSeconds = this.chunksDuration / 1000;
        this.audioContext = new AudioContext();
        this.debug = false;
        this.playing = false;
        this.latency = 0;
        this.audioElement = new Audio();
    }
    stop() {
        var _a;
        if (!this.mediaBuffer)
            return;
        this.playing = false;
        (_a = this.onStop) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    setBufferHeader(packet) {
        var _a;
        if (!packet.data) {
            return;
        }
        const arrayBuffer = packet.data;
        this.mimeType = packet.mimeType;
        (_a = this.mediaBuffer) === null || _a === void 0 ? void 0 : _a.stop();
        this.mediaBuffer = (0, MediaBuffer_1.default)(arrayBuffer, this.mimeType, this.chunksDuration);
        this.audioElement.src = this.mediaBuffer.objectURL;
    }
    playStream() {
        this.playing = true;
    }
    receiveBuffer(packet) {
        var _a;
        if (!this.playing || !((_a = this.mediaBuffer) === null || _a === void 0 ? void 0 : _a.append))
            return;
        const arrayBuffer = packet[0];
        const streamingTime = packet[1];
        this.mediaBuffer.append(arrayBuffer);
        if (this.audioElement.paused)
            this.audioElement.play();
        this.latency =
            Number(String(Date.now()).slice(-5, -3)) -
                streamingTime +
                this.audioContext.baseLatency +
                this.chunksSeconds;
        if (this.debug)
            console.log("Total latency: " + this.latency);
    }
}
exports.AudioStreamer = AudioStreamer;
