"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MediaBuffer = (bufferHeader, mimeType, chunksDuration) => {
    const source = new MediaSource();
    const objectURL = URL.createObjectURL(source);
    var removing = false;
    var totalTime = 0; // miliseconds
    var sourceBuffer = null;
    var buffers = [];
    source.onsourceopen = function () {
        sourceBuffer = source.addSourceBuffer(mimeType);
        sourceBuffer.mode = "sequence";
        sourceBuffer.appendBuffer(bufferHeader);
        sourceBuffer.onerror = function (e) {
            console.error("SourceBuffer error:", e);
        };
        sourceBuffer.onupdateend = () => {
            if (removing) {
                removing = false;
                totalTime = 10000;
                // 0 ~ 10 seconds
                sourceBuffer === null || sourceBuffer === void 0 ? void 0 : sourceBuffer.remove(0, 10);
                return;
            }
            if (!(sourceBuffer === null || sourceBuffer === void 0 ? void 0 : sourceBuffer.updating) && buffers.length !== 0) {
                const buffer = buffers.shift();
                if (buffer) {
                    startAppending(buffer);
                }
            }
        };
    };
    const startAppending = (buffer) => {
        sourceBuffer === null || sourceBuffer === void 0 ? void 0 : sourceBuffer.appendBuffer(buffer);
        totalTime += chunksDuration !== null && chunksDuration !== void 0 ? chunksDuration : 1000;
        // console.log(totalTime, buffer);
    };
    const append = (arrayBuffer) => {
        if (sourceBuffer === null)
            return false;
        if (!sourceBuffer.updating && sourceBuffer.buffered.length === 2)
            // The problem of accessing to 'sourceBuffer.buffered' is that after you append data, the SourceBuffer instance becomes temporarily unusable while it's working.
            // During this time, the SourceBuffer's updating property will be set to true, so it's easy to check for.
            console.log("something wrong");
        if (totalTime >= 20000)
            removing = true;
        if (!sourceBuffer.updating)
            startAppending(arrayBuffer);
        else
            buffers.push(arrayBuffer);
        return totalTime / 1000;
    };
    const stop = function () {
        if (sourceBuffer === null || sourceBuffer === void 0 ? void 0 : sourceBuffer.updating)
            sourceBuffer === null || sourceBuffer === void 0 ? void 0 : sourceBuffer.abort();
        if (source.readyState === "open")
            source.endOfStream();
    };
    return { objectURL, append, stop };
};
exports.default = MediaBuffer;
